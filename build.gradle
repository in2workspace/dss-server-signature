plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'checkstyle'
	id 'org.owasp.dependencycheck' version '8.4.0'
}

group = 'es.in2'
version = '0.0.0'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.9"
}

checkstyle {
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
	source = 'src/main/java'
}

checkstyleTest {
	source = 'src/test/java'
}

sonar {
	properties {
		property "sonar.projectName", "DSS Server Signature"
		property "sonar.projectKey", "in2workspace_dss-server-signature"
		property "sonar.organization", "in2workspace"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.exclusions",
				"src/main/java/es/in2/dss/Application.java, "
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// JSON
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

	// Data
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework:spring-jdbc'
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0'

	// Logging
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// Metrics
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// Resilience
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'

	// Unit Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'

	// Integration Test
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:r2dbc:1.19.3'
	testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('compileJava') {
	inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/DesmosApplication.class'
			])
		}))
	}
}

tasks.register('printVersion') {
	doLast {
		println version
	}
}

tasks.register('printProjectName') {
	doLast {
		println rootProject.name
	}
}
